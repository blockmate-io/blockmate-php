<?php
/**
 * Analytics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  blockmate
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace blockmate\Model;

use \ArrayAccess;
use \blockmate\ObjectSerializer;

/**
 * Analytics Class Doc Comment
 *
 * @category Class
 * @description Analytics
 * @package  blockmate
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Analytics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Analytics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'count_txs_all_forever_onchain' => 'int',
        'count_txs_all_forever_nft' => 'int',
        'count_txs_all_forever_gaming' => 'int',
        'count_txs_all_forever_gambling' => 'int',
        'count_txs_all_365_onchain' => 'int',
        'count_txs_all_365_nft' => 'int',
        'count_txs_all_365_gaming' => 'int',
        'count_txs_all_365_gambling' => 'int',
        'count_txs_all_31_60_onchain' => 'int',
        'count_txs_all_31_60_nft' => 'int',
        'count_txs_all_31_60_gaming' => 'int',
        'count_txs_all_31_60_gambling' => 'int',
        'count_txs_all_30_onchain' => 'int',
        'count_txs_all_30_nft' => 'int',
        'count_txs_all_30_gaming' => 'int',
        'count_txs_all_30_gambling' => 'int',
        'count_txs_all_7_onchain' => 'int',
        'count_txs_all_7_nft' => 'int',
        'count_txs_all_7_gaming' => 'int',
        'count_txs_all_7_gambling' => 'int',
        'count_txs_in_forever_onchain' => 'int',
        'count_txs_in_forever_nft' => 'int',
        'count_txs_in_forever_gaming' => 'int',
        'count_txs_in_forever_gambling' => 'int',
        'count_txs_in_365_onchain' => 'int',
        'count_txs_in_365_nft' => 'int',
        'count_txs_in_365_gaming' => 'int',
        'count_txs_in_365_gambling' => 'int',
        'count_txs_in_31_60_onchain' => 'int',
        'count_txs_in_31_60_nft' => 'int',
        'count_txs_in_31_60_gaming' => 'int',
        'count_txs_in_31_60_gambling' => 'int',
        'count_txs_in_30_onchain' => 'int',
        'count_txs_in_30_nft' => 'int',
        'count_txs_in_30_gaming' => 'int',
        'count_txs_in_30_gambling' => 'int',
        'count_txs_in_7_onchain' => 'int',
        'count_txs_in_7_nft' => 'int',
        'count_txs_in_7_gaming' => 'int',
        'count_txs_in_7_gambling' => 'int',
        'count_txs_out_forever_onchain' => 'int',
        'count_txs_out_forever_nft' => 'int',
        'count_txs_out_forever_gaming' => 'int',
        'count_txs_out_forever_gambling' => 'int',
        'count_txs_out_365_onchain' => 'int',
        'count_txs_out_365_nft' => 'int',
        'count_txs_out_365_gaming' => 'int',
        'count_txs_out_365_gambling' => 'int',
        'count_txs_out_31_60_onchain' => 'int',
        'count_txs_out_31_60_nft' => 'int',
        'count_txs_out_31_60_gaming' => 'int',
        'count_txs_out_31_60_gambling' => 'int',
        'count_txs_out_30_onchain' => 'int',
        'count_txs_out_30_nft' => 'int',
        'count_txs_out_30_gaming' => 'int',
        'count_txs_out_30_gambling' => 'int',
        'count_txs_out_7_onchain' => 'int',
        'count_txs_out_7_nft' => 'int',
        'count_txs_out_7_gaming' => 'int',
        'count_txs_out_7_gambling' => 'int',
        'first_txs_all_onchain' => 'int',
        'first_txs_all_nft' => 'int',
        'first_txs_all_gaming' => 'int',
        'first_txs_all_gambling' => 'int',
        'first_txs_in_onchain' => 'int',
        'first_txs_in_nft' => 'int',
        'first_txs_in_gaming' => 'int',
        'first_txs_in_gambling' => 'int',
        'first_txs_out_onchain' => 'int',
        'first_txs_out_nft' => 'int',
        'first_txs_out_gaming' => 'int',
        'first_txs_out_gambling' => 'int',
        'last_txs_all_onchain' => 'int',
        'last_txs_all_nft' => 'int',
        'last_txs_all_gaming' => 'int',
        'last_txs_all_gambling' => 'int',
        'last_txs_in_onchain' => 'int',
        'last_txs_in_nft' => 'int',
        'last_txs_in_gaming' => 'int',
        'last_txs_in_gambling' => 'int',
        'last_txs_out_onchain' => 'int',
        'last_txs_out_nft' => 'int',
        'last_txs_out_gaming' => 'int',
        'last_txs_out_gambling' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'count_txs_all_forever_onchain' => null,
        'count_txs_all_forever_nft' => null,
        'count_txs_all_forever_gaming' => null,
        'count_txs_all_forever_gambling' => null,
        'count_txs_all_365_onchain' => null,
        'count_txs_all_365_nft' => null,
        'count_txs_all_365_gaming' => null,
        'count_txs_all_365_gambling' => null,
        'count_txs_all_31_60_onchain' => null,
        'count_txs_all_31_60_nft' => null,
        'count_txs_all_31_60_gaming' => null,
        'count_txs_all_31_60_gambling' => null,
        'count_txs_all_30_onchain' => null,
        'count_txs_all_30_nft' => null,
        'count_txs_all_30_gaming' => null,
        'count_txs_all_30_gambling' => null,
        'count_txs_all_7_onchain' => null,
        'count_txs_all_7_nft' => null,
        'count_txs_all_7_gaming' => null,
        'count_txs_all_7_gambling' => null,
        'count_txs_in_forever_onchain' => null,
        'count_txs_in_forever_nft' => null,
        'count_txs_in_forever_gaming' => null,
        'count_txs_in_forever_gambling' => null,
        'count_txs_in_365_onchain' => null,
        'count_txs_in_365_nft' => null,
        'count_txs_in_365_gaming' => null,
        'count_txs_in_365_gambling' => null,
        'count_txs_in_31_60_onchain' => null,
        'count_txs_in_31_60_nft' => null,
        'count_txs_in_31_60_gaming' => null,
        'count_txs_in_31_60_gambling' => null,
        'count_txs_in_30_onchain' => null,
        'count_txs_in_30_nft' => null,
        'count_txs_in_30_gaming' => null,
        'count_txs_in_30_gambling' => null,
        'count_txs_in_7_onchain' => null,
        'count_txs_in_7_nft' => null,
        'count_txs_in_7_gaming' => null,
        'count_txs_in_7_gambling' => null,
        'count_txs_out_forever_onchain' => null,
        'count_txs_out_forever_nft' => null,
        'count_txs_out_forever_gaming' => null,
        'count_txs_out_forever_gambling' => null,
        'count_txs_out_365_onchain' => null,
        'count_txs_out_365_nft' => null,
        'count_txs_out_365_gaming' => null,
        'count_txs_out_365_gambling' => null,
        'count_txs_out_31_60_onchain' => null,
        'count_txs_out_31_60_nft' => null,
        'count_txs_out_31_60_gaming' => null,
        'count_txs_out_31_60_gambling' => null,
        'count_txs_out_30_onchain' => null,
        'count_txs_out_30_nft' => null,
        'count_txs_out_30_gaming' => null,
        'count_txs_out_30_gambling' => null,
        'count_txs_out_7_onchain' => null,
        'count_txs_out_7_nft' => null,
        'count_txs_out_7_gaming' => null,
        'count_txs_out_7_gambling' => null,
        'first_txs_all_onchain' => null,
        'first_txs_all_nft' => null,
        'first_txs_all_gaming' => null,
        'first_txs_all_gambling' => null,
        'first_txs_in_onchain' => null,
        'first_txs_in_nft' => null,
        'first_txs_in_gaming' => null,
        'first_txs_in_gambling' => null,
        'first_txs_out_onchain' => null,
        'first_txs_out_nft' => null,
        'first_txs_out_gaming' => null,
        'first_txs_out_gambling' => null,
        'last_txs_all_onchain' => null,
        'last_txs_all_nft' => null,
        'last_txs_all_gaming' => null,
        'last_txs_all_gambling' => null,
        'last_txs_in_onchain' => null,
        'last_txs_in_nft' => null,
        'last_txs_in_gaming' => null,
        'last_txs_in_gambling' => null,
        'last_txs_out_onchain' => null,
        'last_txs_out_nft' => null,
        'last_txs_out_gaming' => null,
        'last_txs_out_gambling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'count_txs_all_forever_onchain' => false,
		'count_txs_all_forever_nft' => false,
		'count_txs_all_forever_gaming' => false,
		'count_txs_all_forever_gambling' => false,
		'count_txs_all_365_onchain' => false,
		'count_txs_all_365_nft' => false,
		'count_txs_all_365_gaming' => false,
		'count_txs_all_365_gambling' => false,
		'count_txs_all_31_60_onchain' => false,
		'count_txs_all_31_60_nft' => false,
		'count_txs_all_31_60_gaming' => false,
		'count_txs_all_31_60_gambling' => false,
		'count_txs_all_30_onchain' => false,
		'count_txs_all_30_nft' => false,
		'count_txs_all_30_gaming' => false,
		'count_txs_all_30_gambling' => false,
		'count_txs_all_7_onchain' => false,
		'count_txs_all_7_nft' => false,
		'count_txs_all_7_gaming' => false,
		'count_txs_all_7_gambling' => false,
		'count_txs_in_forever_onchain' => false,
		'count_txs_in_forever_nft' => false,
		'count_txs_in_forever_gaming' => false,
		'count_txs_in_forever_gambling' => false,
		'count_txs_in_365_onchain' => false,
		'count_txs_in_365_nft' => false,
		'count_txs_in_365_gaming' => false,
		'count_txs_in_365_gambling' => false,
		'count_txs_in_31_60_onchain' => false,
		'count_txs_in_31_60_nft' => false,
		'count_txs_in_31_60_gaming' => false,
		'count_txs_in_31_60_gambling' => false,
		'count_txs_in_30_onchain' => false,
		'count_txs_in_30_nft' => false,
		'count_txs_in_30_gaming' => false,
		'count_txs_in_30_gambling' => false,
		'count_txs_in_7_onchain' => false,
		'count_txs_in_7_nft' => false,
		'count_txs_in_7_gaming' => false,
		'count_txs_in_7_gambling' => false,
		'count_txs_out_forever_onchain' => false,
		'count_txs_out_forever_nft' => false,
		'count_txs_out_forever_gaming' => false,
		'count_txs_out_forever_gambling' => false,
		'count_txs_out_365_onchain' => false,
		'count_txs_out_365_nft' => false,
		'count_txs_out_365_gaming' => false,
		'count_txs_out_365_gambling' => false,
		'count_txs_out_31_60_onchain' => false,
		'count_txs_out_31_60_nft' => false,
		'count_txs_out_31_60_gaming' => false,
		'count_txs_out_31_60_gambling' => false,
		'count_txs_out_30_onchain' => false,
		'count_txs_out_30_nft' => false,
		'count_txs_out_30_gaming' => false,
		'count_txs_out_30_gambling' => false,
		'count_txs_out_7_onchain' => false,
		'count_txs_out_7_nft' => false,
		'count_txs_out_7_gaming' => false,
		'count_txs_out_7_gambling' => false,
		'first_txs_all_onchain' => false,
		'first_txs_all_nft' => false,
		'first_txs_all_gaming' => false,
		'first_txs_all_gambling' => false,
		'first_txs_in_onchain' => false,
		'first_txs_in_nft' => false,
		'first_txs_in_gaming' => false,
		'first_txs_in_gambling' => false,
		'first_txs_out_onchain' => false,
		'first_txs_out_nft' => false,
		'first_txs_out_gaming' => false,
		'first_txs_out_gambling' => false,
		'last_txs_all_onchain' => false,
		'last_txs_all_nft' => false,
		'last_txs_all_gaming' => false,
		'last_txs_all_gambling' => false,
		'last_txs_in_onchain' => false,
		'last_txs_in_nft' => false,
		'last_txs_in_gaming' => false,
		'last_txs_in_gambling' => false,
		'last_txs_out_onchain' => false,
		'last_txs_out_nft' => false,
		'last_txs_out_gaming' => false,
		'last_txs_out_gambling' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count_txs_all_forever_onchain' => 'count_txs_all_forever_onchain',
        'count_txs_all_forever_nft' => 'count_txs_all_forever_nft',
        'count_txs_all_forever_gaming' => 'count_txs_all_forever_gaming',
        'count_txs_all_forever_gambling' => 'count_txs_all_forever_gambling',
        'count_txs_all_365_onchain' => 'count_txs_all_365_onchain',
        'count_txs_all_365_nft' => 'count_txs_all_365_nft',
        'count_txs_all_365_gaming' => 'count_txs_all_365_gaming',
        'count_txs_all_365_gambling' => 'count_txs_all_365_gambling',
        'count_txs_all_31_60_onchain' => 'count_txs_all_31_60_onchain',
        'count_txs_all_31_60_nft' => 'count_txs_all_31_60_nft',
        'count_txs_all_31_60_gaming' => 'count_txs_all_31_60_gaming',
        'count_txs_all_31_60_gambling' => 'count_txs_all_31_60_gambling',
        'count_txs_all_30_onchain' => 'count_txs_all_30_onchain',
        'count_txs_all_30_nft' => 'count_txs_all_30_nft',
        'count_txs_all_30_gaming' => 'count_txs_all_30_gaming',
        'count_txs_all_30_gambling' => 'count_txs_all_30_gambling',
        'count_txs_all_7_onchain' => 'count_txs_all_7_onchain',
        'count_txs_all_7_nft' => 'count_txs_all_7_nft',
        'count_txs_all_7_gaming' => 'count_txs_all_7_gaming',
        'count_txs_all_7_gambling' => 'count_txs_all_7_gambling',
        'count_txs_in_forever_onchain' => 'count_txs_in_forever_onchain',
        'count_txs_in_forever_nft' => 'count_txs_in_forever_nft',
        'count_txs_in_forever_gaming' => 'count_txs_in_forever_gaming',
        'count_txs_in_forever_gambling' => 'count_txs_in_forever_gambling',
        'count_txs_in_365_onchain' => 'count_txs_in_365_onchain',
        'count_txs_in_365_nft' => 'count_txs_in_365_nft',
        'count_txs_in_365_gaming' => 'count_txs_in_365_gaming',
        'count_txs_in_365_gambling' => 'count_txs_in_365_gambling',
        'count_txs_in_31_60_onchain' => 'count_txs_in_31_60_onchain',
        'count_txs_in_31_60_nft' => 'count_txs_in_31_60_nft',
        'count_txs_in_31_60_gaming' => 'count_txs_in_31_60_gaming',
        'count_txs_in_31_60_gambling' => 'count_txs_in_31_60_gambling',
        'count_txs_in_30_onchain' => 'count_txs_in_30_onchain',
        'count_txs_in_30_nft' => 'count_txs_in_30_nft',
        'count_txs_in_30_gaming' => 'count_txs_in_30_gaming',
        'count_txs_in_30_gambling' => 'count_txs_in_30_gambling',
        'count_txs_in_7_onchain' => 'count_txs_in_7_onchain',
        'count_txs_in_7_nft' => 'count_txs_in_7_nft',
        'count_txs_in_7_gaming' => 'count_txs_in_7_gaming',
        'count_txs_in_7_gambling' => 'count_txs_in_7_gambling',
        'count_txs_out_forever_onchain' => 'count_txs_out_forever_onchain',
        'count_txs_out_forever_nft' => 'count_txs_out_forever_nft',
        'count_txs_out_forever_gaming' => 'count_txs_out_forever_gaming',
        'count_txs_out_forever_gambling' => 'count_txs_out_forever_gambling',
        'count_txs_out_365_onchain' => 'count_txs_out_365_onchain',
        'count_txs_out_365_nft' => 'count_txs_out_365_nft',
        'count_txs_out_365_gaming' => 'count_txs_out_365_gaming',
        'count_txs_out_365_gambling' => 'count_txs_out_365_gambling',
        'count_txs_out_31_60_onchain' => 'count_txs_out_31_60_onchain',
        'count_txs_out_31_60_nft' => 'count_txs_out_31_60_nft',
        'count_txs_out_31_60_gaming' => 'count_txs_out_31_60_gaming',
        'count_txs_out_31_60_gambling' => 'count_txs_out_31_60_gambling',
        'count_txs_out_30_onchain' => 'count_txs_out_30_onchain',
        'count_txs_out_30_nft' => 'count_txs_out_30_nft',
        'count_txs_out_30_gaming' => 'count_txs_out_30_gaming',
        'count_txs_out_30_gambling' => 'count_txs_out_30_gambling',
        'count_txs_out_7_onchain' => 'count_txs_out_7_onchain',
        'count_txs_out_7_nft' => 'count_txs_out_7_nft',
        'count_txs_out_7_gaming' => 'count_txs_out_7_gaming',
        'count_txs_out_7_gambling' => 'count_txs_out_7_gambling',
        'first_txs_all_onchain' => 'first_txs_all_onchain',
        'first_txs_all_nft' => 'first_txs_all_nft',
        'first_txs_all_gaming' => 'first_txs_all_gaming',
        'first_txs_all_gambling' => 'first_txs_all_gambling',
        'first_txs_in_onchain' => 'first_txs_in_onchain',
        'first_txs_in_nft' => 'first_txs_in_nft',
        'first_txs_in_gaming' => 'first_txs_in_gaming',
        'first_txs_in_gambling' => 'first_txs_in_gambling',
        'first_txs_out_onchain' => 'first_txs_out_onchain',
        'first_txs_out_nft' => 'first_txs_out_nft',
        'first_txs_out_gaming' => 'first_txs_out_gaming',
        'first_txs_out_gambling' => 'first_txs_out_gambling',
        'last_txs_all_onchain' => 'last_txs_all_onchain',
        'last_txs_all_nft' => 'last_txs_all_nft',
        'last_txs_all_gaming' => 'last_txs_all_gaming',
        'last_txs_all_gambling' => 'last_txs_all_gambling',
        'last_txs_in_onchain' => 'last_txs_in_onchain',
        'last_txs_in_nft' => 'last_txs_in_nft',
        'last_txs_in_gaming' => 'last_txs_in_gaming',
        'last_txs_in_gambling' => 'last_txs_in_gambling',
        'last_txs_out_onchain' => 'last_txs_out_onchain',
        'last_txs_out_nft' => 'last_txs_out_nft',
        'last_txs_out_gaming' => 'last_txs_out_gaming',
        'last_txs_out_gambling' => 'last_txs_out_gambling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count_txs_all_forever_onchain' => 'setCountTxsAllForeverOnchain',
        'count_txs_all_forever_nft' => 'setCountTxsAllForeverNft',
        'count_txs_all_forever_gaming' => 'setCountTxsAllForeverGaming',
        'count_txs_all_forever_gambling' => 'setCountTxsAllForeverGambling',
        'count_txs_all_365_onchain' => 'setCountTxsAll365Onchain',
        'count_txs_all_365_nft' => 'setCountTxsAll365Nft',
        'count_txs_all_365_gaming' => 'setCountTxsAll365Gaming',
        'count_txs_all_365_gambling' => 'setCountTxsAll365Gambling',
        'count_txs_all_31_60_onchain' => 'setCountTxsAll3160Onchain',
        'count_txs_all_31_60_nft' => 'setCountTxsAll3160Nft',
        'count_txs_all_31_60_gaming' => 'setCountTxsAll3160Gaming',
        'count_txs_all_31_60_gambling' => 'setCountTxsAll3160Gambling',
        'count_txs_all_30_onchain' => 'setCountTxsAll30Onchain',
        'count_txs_all_30_nft' => 'setCountTxsAll30Nft',
        'count_txs_all_30_gaming' => 'setCountTxsAll30Gaming',
        'count_txs_all_30_gambling' => 'setCountTxsAll30Gambling',
        'count_txs_all_7_onchain' => 'setCountTxsAll7Onchain',
        'count_txs_all_7_nft' => 'setCountTxsAll7Nft',
        'count_txs_all_7_gaming' => 'setCountTxsAll7Gaming',
        'count_txs_all_7_gambling' => 'setCountTxsAll7Gambling',
        'count_txs_in_forever_onchain' => 'setCountTxsInForeverOnchain',
        'count_txs_in_forever_nft' => 'setCountTxsInForeverNft',
        'count_txs_in_forever_gaming' => 'setCountTxsInForeverGaming',
        'count_txs_in_forever_gambling' => 'setCountTxsInForeverGambling',
        'count_txs_in_365_onchain' => 'setCountTxsIn365Onchain',
        'count_txs_in_365_nft' => 'setCountTxsIn365Nft',
        'count_txs_in_365_gaming' => 'setCountTxsIn365Gaming',
        'count_txs_in_365_gambling' => 'setCountTxsIn365Gambling',
        'count_txs_in_31_60_onchain' => 'setCountTxsIn3160Onchain',
        'count_txs_in_31_60_nft' => 'setCountTxsIn3160Nft',
        'count_txs_in_31_60_gaming' => 'setCountTxsIn3160Gaming',
        'count_txs_in_31_60_gambling' => 'setCountTxsIn3160Gambling',
        'count_txs_in_30_onchain' => 'setCountTxsIn30Onchain',
        'count_txs_in_30_nft' => 'setCountTxsIn30Nft',
        'count_txs_in_30_gaming' => 'setCountTxsIn30Gaming',
        'count_txs_in_30_gambling' => 'setCountTxsIn30Gambling',
        'count_txs_in_7_onchain' => 'setCountTxsIn7Onchain',
        'count_txs_in_7_nft' => 'setCountTxsIn7Nft',
        'count_txs_in_7_gaming' => 'setCountTxsIn7Gaming',
        'count_txs_in_7_gambling' => 'setCountTxsIn7Gambling',
        'count_txs_out_forever_onchain' => 'setCountTxsOutForeverOnchain',
        'count_txs_out_forever_nft' => 'setCountTxsOutForeverNft',
        'count_txs_out_forever_gaming' => 'setCountTxsOutForeverGaming',
        'count_txs_out_forever_gambling' => 'setCountTxsOutForeverGambling',
        'count_txs_out_365_onchain' => 'setCountTxsOut365Onchain',
        'count_txs_out_365_nft' => 'setCountTxsOut365Nft',
        'count_txs_out_365_gaming' => 'setCountTxsOut365Gaming',
        'count_txs_out_365_gambling' => 'setCountTxsOut365Gambling',
        'count_txs_out_31_60_onchain' => 'setCountTxsOut3160Onchain',
        'count_txs_out_31_60_nft' => 'setCountTxsOut3160Nft',
        'count_txs_out_31_60_gaming' => 'setCountTxsOut3160Gaming',
        'count_txs_out_31_60_gambling' => 'setCountTxsOut3160Gambling',
        'count_txs_out_30_onchain' => 'setCountTxsOut30Onchain',
        'count_txs_out_30_nft' => 'setCountTxsOut30Nft',
        'count_txs_out_30_gaming' => 'setCountTxsOut30Gaming',
        'count_txs_out_30_gambling' => 'setCountTxsOut30Gambling',
        'count_txs_out_7_onchain' => 'setCountTxsOut7Onchain',
        'count_txs_out_7_nft' => 'setCountTxsOut7Nft',
        'count_txs_out_7_gaming' => 'setCountTxsOut7Gaming',
        'count_txs_out_7_gambling' => 'setCountTxsOut7Gambling',
        'first_txs_all_onchain' => 'setFirstTxsAllOnchain',
        'first_txs_all_nft' => 'setFirstTxsAllNft',
        'first_txs_all_gaming' => 'setFirstTxsAllGaming',
        'first_txs_all_gambling' => 'setFirstTxsAllGambling',
        'first_txs_in_onchain' => 'setFirstTxsInOnchain',
        'first_txs_in_nft' => 'setFirstTxsInNft',
        'first_txs_in_gaming' => 'setFirstTxsInGaming',
        'first_txs_in_gambling' => 'setFirstTxsInGambling',
        'first_txs_out_onchain' => 'setFirstTxsOutOnchain',
        'first_txs_out_nft' => 'setFirstTxsOutNft',
        'first_txs_out_gaming' => 'setFirstTxsOutGaming',
        'first_txs_out_gambling' => 'setFirstTxsOutGambling',
        'last_txs_all_onchain' => 'setLastTxsAllOnchain',
        'last_txs_all_nft' => 'setLastTxsAllNft',
        'last_txs_all_gaming' => 'setLastTxsAllGaming',
        'last_txs_all_gambling' => 'setLastTxsAllGambling',
        'last_txs_in_onchain' => 'setLastTxsInOnchain',
        'last_txs_in_nft' => 'setLastTxsInNft',
        'last_txs_in_gaming' => 'setLastTxsInGaming',
        'last_txs_in_gambling' => 'setLastTxsInGambling',
        'last_txs_out_onchain' => 'setLastTxsOutOnchain',
        'last_txs_out_nft' => 'setLastTxsOutNft',
        'last_txs_out_gaming' => 'setLastTxsOutGaming',
        'last_txs_out_gambling' => 'setLastTxsOutGambling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count_txs_all_forever_onchain' => 'getCountTxsAllForeverOnchain',
        'count_txs_all_forever_nft' => 'getCountTxsAllForeverNft',
        'count_txs_all_forever_gaming' => 'getCountTxsAllForeverGaming',
        'count_txs_all_forever_gambling' => 'getCountTxsAllForeverGambling',
        'count_txs_all_365_onchain' => 'getCountTxsAll365Onchain',
        'count_txs_all_365_nft' => 'getCountTxsAll365Nft',
        'count_txs_all_365_gaming' => 'getCountTxsAll365Gaming',
        'count_txs_all_365_gambling' => 'getCountTxsAll365Gambling',
        'count_txs_all_31_60_onchain' => 'getCountTxsAll3160Onchain',
        'count_txs_all_31_60_nft' => 'getCountTxsAll3160Nft',
        'count_txs_all_31_60_gaming' => 'getCountTxsAll3160Gaming',
        'count_txs_all_31_60_gambling' => 'getCountTxsAll3160Gambling',
        'count_txs_all_30_onchain' => 'getCountTxsAll30Onchain',
        'count_txs_all_30_nft' => 'getCountTxsAll30Nft',
        'count_txs_all_30_gaming' => 'getCountTxsAll30Gaming',
        'count_txs_all_30_gambling' => 'getCountTxsAll30Gambling',
        'count_txs_all_7_onchain' => 'getCountTxsAll7Onchain',
        'count_txs_all_7_nft' => 'getCountTxsAll7Nft',
        'count_txs_all_7_gaming' => 'getCountTxsAll7Gaming',
        'count_txs_all_7_gambling' => 'getCountTxsAll7Gambling',
        'count_txs_in_forever_onchain' => 'getCountTxsInForeverOnchain',
        'count_txs_in_forever_nft' => 'getCountTxsInForeverNft',
        'count_txs_in_forever_gaming' => 'getCountTxsInForeverGaming',
        'count_txs_in_forever_gambling' => 'getCountTxsInForeverGambling',
        'count_txs_in_365_onchain' => 'getCountTxsIn365Onchain',
        'count_txs_in_365_nft' => 'getCountTxsIn365Nft',
        'count_txs_in_365_gaming' => 'getCountTxsIn365Gaming',
        'count_txs_in_365_gambling' => 'getCountTxsIn365Gambling',
        'count_txs_in_31_60_onchain' => 'getCountTxsIn3160Onchain',
        'count_txs_in_31_60_nft' => 'getCountTxsIn3160Nft',
        'count_txs_in_31_60_gaming' => 'getCountTxsIn3160Gaming',
        'count_txs_in_31_60_gambling' => 'getCountTxsIn3160Gambling',
        'count_txs_in_30_onchain' => 'getCountTxsIn30Onchain',
        'count_txs_in_30_nft' => 'getCountTxsIn30Nft',
        'count_txs_in_30_gaming' => 'getCountTxsIn30Gaming',
        'count_txs_in_30_gambling' => 'getCountTxsIn30Gambling',
        'count_txs_in_7_onchain' => 'getCountTxsIn7Onchain',
        'count_txs_in_7_nft' => 'getCountTxsIn7Nft',
        'count_txs_in_7_gaming' => 'getCountTxsIn7Gaming',
        'count_txs_in_7_gambling' => 'getCountTxsIn7Gambling',
        'count_txs_out_forever_onchain' => 'getCountTxsOutForeverOnchain',
        'count_txs_out_forever_nft' => 'getCountTxsOutForeverNft',
        'count_txs_out_forever_gaming' => 'getCountTxsOutForeverGaming',
        'count_txs_out_forever_gambling' => 'getCountTxsOutForeverGambling',
        'count_txs_out_365_onchain' => 'getCountTxsOut365Onchain',
        'count_txs_out_365_nft' => 'getCountTxsOut365Nft',
        'count_txs_out_365_gaming' => 'getCountTxsOut365Gaming',
        'count_txs_out_365_gambling' => 'getCountTxsOut365Gambling',
        'count_txs_out_31_60_onchain' => 'getCountTxsOut3160Onchain',
        'count_txs_out_31_60_nft' => 'getCountTxsOut3160Nft',
        'count_txs_out_31_60_gaming' => 'getCountTxsOut3160Gaming',
        'count_txs_out_31_60_gambling' => 'getCountTxsOut3160Gambling',
        'count_txs_out_30_onchain' => 'getCountTxsOut30Onchain',
        'count_txs_out_30_nft' => 'getCountTxsOut30Nft',
        'count_txs_out_30_gaming' => 'getCountTxsOut30Gaming',
        'count_txs_out_30_gambling' => 'getCountTxsOut30Gambling',
        'count_txs_out_7_onchain' => 'getCountTxsOut7Onchain',
        'count_txs_out_7_nft' => 'getCountTxsOut7Nft',
        'count_txs_out_7_gaming' => 'getCountTxsOut7Gaming',
        'count_txs_out_7_gambling' => 'getCountTxsOut7Gambling',
        'first_txs_all_onchain' => 'getFirstTxsAllOnchain',
        'first_txs_all_nft' => 'getFirstTxsAllNft',
        'first_txs_all_gaming' => 'getFirstTxsAllGaming',
        'first_txs_all_gambling' => 'getFirstTxsAllGambling',
        'first_txs_in_onchain' => 'getFirstTxsInOnchain',
        'first_txs_in_nft' => 'getFirstTxsInNft',
        'first_txs_in_gaming' => 'getFirstTxsInGaming',
        'first_txs_in_gambling' => 'getFirstTxsInGambling',
        'first_txs_out_onchain' => 'getFirstTxsOutOnchain',
        'first_txs_out_nft' => 'getFirstTxsOutNft',
        'first_txs_out_gaming' => 'getFirstTxsOutGaming',
        'first_txs_out_gambling' => 'getFirstTxsOutGambling',
        'last_txs_all_onchain' => 'getLastTxsAllOnchain',
        'last_txs_all_nft' => 'getLastTxsAllNft',
        'last_txs_all_gaming' => 'getLastTxsAllGaming',
        'last_txs_all_gambling' => 'getLastTxsAllGambling',
        'last_txs_in_onchain' => 'getLastTxsInOnchain',
        'last_txs_in_nft' => 'getLastTxsInNft',
        'last_txs_in_gaming' => 'getLastTxsInGaming',
        'last_txs_in_gambling' => 'getLastTxsInGambling',
        'last_txs_out_onchain' => 'getLastTxsOutOnchain',
        'last_txs_out_nft' => 'getLastTxsOutNft',
        'last_txs_out_gaming' => 'getLastTxsOutGaming',
        'last_txs_out_gambling' => 'getLastTxsOutGambling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('count_txs_all_forever_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_all_forever_nft', $data ?? [], null);
        $this->setIfExists('count_txs_all_forever_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_all_forever_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_all_365_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_all_365_nft', $data ?? [], null);
        $this->setIfExists('count_txs_all_365_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_all_365_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_all_31_60_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_all_31_60_nft', $data ?? [], null);
        $this->setIfExists('count_txs_all_31_60_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_all_31_60_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_all_30_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_all_30_nft', $data ?? [], null);
        $this->setIfExists('count_txs_all_30_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_all_30_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_all_7_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_all_7_nft', $data ?? [], null);
        $this->setIfExists('count_txs_all_7_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_all_7_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_in_forever_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_in_forever_nft', $data ?? [], null);
        $this->setIfExists('count_txs_in_forever_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_in_forever_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_in_365_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_in_365_nft', $data ?? [], null);
        $this->setIfExists('count_txs_in_365_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_in_365_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_in_31_60_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_in_31_60_nft', $data ?? [], null);
        $this->setIfExists('count_txs_in_31_60_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_in_31_60_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_in_30_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_in_30_nft', $data ?? [], null);
        $this->setIfExists('count_txs_in_30_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_in_30_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_in_7_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_in_7_nft', $data ?? [], null);
        $this->setIfExists('count_txs_in_7_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_in_7_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_out_forever_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_out_forever_nft', $data ?? [], null);
        $this->setIfExists('count_txs_out_forever_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_out_forever_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_out_365_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_out_365_nft', $data ?? [], null);
        $this->setIfExists('count_txs_out_365_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_out_365_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_out_31_60_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_out_31_60_nft', $data ?? [], null);
        $this->setIfExists('count_txs_out_31_60_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_out_31_60_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_out_30_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_out_30_nft', $data ?? [], null);
        $this->setIfExists('count_txs_out_30_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_out_30_gambling', $data ?? [], null);
        $this->setIfExists('count_txs_out_7_onchain', $data ?? [], null);
        $this->setIfExists('count_txs_out_7_nft', $data ?? [], null);
        $this->setIfExists('count_txs_out_7_gaming', $data ?? [], null);
        $this->setIfExists('count_txs_out_7_gambling', $data ?? [], null);
        $this->setIfExists('first_txs_all_onchain', $data ?? [], null);
        $this->setIfExists('first_txs_all_nft', $data ?? [], null);
        $this->setIfExists('first_txs_all_gaming', $data ?? [], null);
        $this->setIfExists('first_txs_all_gambling', $data ?? [], null);
        $this->setIfExists('first_txs_in_onchain', $data ?? [], null);
        $this->setIfExists('first_txs_in_nft', $data ?? [], null);
        $this->setIfExists('first_txs_in_gaming', $data ?? [], null);
        $this->setIfExists('first_txs_in_gambling', $data ?? [], null);
        $this->setIfExists('first_txs_out_onchain', $data ?? [], null);
        $this->setIfExists('first_txs_out_nft', $data ?? [], null);
        $this->setIfExists('first_txs_out_gaming', $data ?? [], null);
        $this->setIfExists('first_txs_out_gambling', $data ?? [], null);
        $this->setIfExists('last_txs_all_onchain', $data ?? [], null);
        $this->setIfExists('last_txs_all_nft', $data ?? [], null);
        $this->setIfExists('last_txs_all_gaming', $data ?? [], null);
        $this->setIfExists('last_txs_all_gambling', $data ?? [], null);
        $this->setIfExists('last_txs_in_onchain', $data ?? [], null);
        $this->setIfExists('last_txs_in_nft', $data ?? [], null);
        $this->setIfExists('last_txs_in_gaming', $data ?? [], null);
        $this->setIfExists('last_txs_in_gambling', $data ?? [], null);
        $this->setIfExists('last_txs_out_onchain', $data ?? [], null);
        $this->setIfExists('last_txs_out_nft', $data ?? [], null);
        $this->setIfExists('last_txs_out_gaming', $data ?? [], null);
        $this->setIfExists('last_txs_out_gambling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count_txs_all_forever_onchain
     *
     * @return int|null
     */
    public function getCountTxsAllForeverOnchain()
    {
        return $this->container['count_txs_all_forever_onchain'];
    }

    /**
     * Sets count_txs_all_forever_onchain
     *
     * @param int|null $count_txs_all_forever_onchain Transactions count
     *
     * @return self
     */
    public function setCountTxsAllForeverOnchain($count_txs_all_forever_onchain)
    {

        if (is_null($count_txs_all_forever_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_forever_onchain cannot be null');
        }

        $this->container['count_txs_all_forever_onchain'] = $count_txs_all_forever_onchain;

        return $this;
    }

    /**
     * Gets count_txs_all_forever_nft
     *
     * @return int|null
     */
    public function getCountTxsAllForeverNft()
    {
        return $this->container['count_txs_all_forever_nft'];
    }

    /**
     * Sets count_txs_all_forever_nft
     *
     * @param int|null $count_txs_all_forever_nft NFT transactions count
     *
     * @return self
     */
    public function setCountTxsAllForeverNft($count_txs_all_forever_nft)
    {

        if (is_null($count_txs_all_forever_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_forever_nft cannot be null');
        }

        $this->container['count_txs_all_forever_nft'] = $count_txs_all_forever_nft;

        return $this;
    }

    /**
     * Gets count_txs_all_forever_gaming
     *
     * @return int|null
     */
    public function getCountTxsAllForeverGaming()
    {
        return $this->container['count_txs_all_forever_gaming'];
    }

    /**
     * Sets count_txs_all_forever_gaming
     *
     * @param int|null $count_txs_all_forever_gaming Gaming transactions count
     *
     * @return self
     */
    public function setCountTxsAllForeverGaming($count_txs_all_forever_gaming)
    {

        if (is_null($count_txs_all_forever_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_forever_gaming cannot be null');
        }

        $this->container['count_txs_all_forever_gaming'] = $count_txs_all_forever_gaming;

        return $this;
    }

    /**
     * Gets count_txs_all_forever_gambling
     *
     * @return int|null
     */
    public function getCountTxsAllForeverGambling()
    {
        return $this->container['count_txs_all_forever_gambling'];
    }

    /**
     * Sets count_txs_all_forever_gambling
     *
     * @param int|null $count_txs_all_forever_gambling Gambling transactions count
     *
     * @return self
     */
    public function setCountTxsAllForeverGambling($count_txs_all_forever_gambling)
    {

        if (is_null($count_txs_all_forever_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_forever_gambling cannot be null');
        }

        $this->container['count_txs_all_forever_gambling'] = $count_txs_all_forever_gambling;

        return $this;
    }

    /**
     * Gets count_txs_all_365_onchain
     *
     * @return int|null
     */
    public function getCountTxsAll365Onchain()
    {
        return $this->container['count_txs_all_365_onchain'];
    }

    /**
     * Sets count_txs_all_365_onchain
     *
     * @param int|null $count_txs_all_365_onchain Transactions count during last year
     *
     * @return self
     */
    public function setCountTxsAll365Onchain($count_txs_all_365_onchain)
    {

        if (is_null($count_txs_all_365_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_365_onchain cannot be null');
        }

        $this->container['count_txs_all_365_onchain'] = $count_txs_all_365_onchain;

        return $this;
    }

    /**
     * Gets count_txs_all_365_nft
     *
     * @return int|null
     */
    public function getCountTxsAll365Nft()
    {
        return $this->container['count_txs_all_365_nft'];
    }

    /**
     * Sets count_txs_all_365_nft
     *
     * @param int|null $count_txs_all_365_nft NFT transactions count during last year
     *
     * @return self
     */
    public function setCountTxsAll365Nft($count_txs_all_365_nft)
    {

        if (is_null($count_txs_all_365_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_365_nft cannot be null');
        }

        $this->container['count_txs_all_365_nft'] = $count_txs_all_365_nft;

        return $this;
    }

    /**
     * Gets count_txs_all_365_gaming
     *
     * @return int|null
     */
    public function getCountTxsAll365Gaming()
    {
        return $this->container['count_txs_all_365_gaming'];
    }

    /**
     * Sets count_txs_all_365_gaming
     *
     * @param int|null $count_txs_all_365_gaming Gaming transactions count during last year
     *
     * @return self
     */
    public function setCountTxsAll365Gaming($count_txs_all_365_gaming)
    {

        if (is_null($count_txs_all_365_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_365_gaming cannot be null');
        }

        $this->container['count_txs_all_365_gaming'] = $count_txs_all_365_gaming;

        return $this;
    }

    /**
     * Gets count_txs_all_365_gambling
     *
     * @return int|null
     */
    public function getCountTxsAll365Gambling()
    {
        return $this->container['count_txs_all_365_gambling'];
    }

    /**
     * Sets count_txs_all_365_gambling
     *
     * @param int|null $count_txs_all_365_gambling Gambling transactions count during last year
     *
     * @return self
     */
    public function setCountTxsAll365Gambling($count_txs_all_365_gambling)
    {

        if (is_null($count_txs_all_365_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_365_gambling cannot be null');
        }

        $this->container['count_txs_all_365_gambling'] = $count_txs_all_365_gambling;

        return $this;
    }

    /**
     * Gets count_txs_all_31_60_onchain
     *
     * @return int|null
     */
    public function getCountTxsAll3160Onchain()
    {
        return $this->container['count_txs_all_31_60_onchain'];
    }

    /**
     * Sets count_txs_all_31_60_onchain
     *
     * @param int|null $count_txs_all_31_60_onchain Transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsAll3160Onchain($count_txs_all_31_60_onchain)
    {

        if (is_null($count_txs_all_31_60_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_31_60_onchain cannot be null');
        }

        $this->container['count_txs_all_31_60_onchain'] = $count_txs_all_31_60_onchain;

        return $this;
    }

    /**
     * Gets count_txs_all_31_60_nft
     *
     * @return int|null
     */
    public function getCountTxsAll3160Nft()
    {
        return $this->container['count_txs_all_31_60_nft'];
    }

    /**
     * Sets count_txs_all_31_60_nft
     *
     * @param int|null $count_txs_all_31_60_nft NFT transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsAll3160Nft($count_txs_all_31_60_nft)
    {

        if (is_null($count_txs_all_31_60_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_31_60_nft cannot be null');
        }

        $this->container['count_txs_all_31_60_nft'] = $count_txs_all_31_60_nft;

        return $this;
    }

    /**
     * Gets count_txs_all_31_60_gaming
     *
     * @return int|null
     */
    public function getCountTxsAll3160Gaming()
    {
        return $this->container['count_txs_all_31_60_gaming'];
    }

    /**
     * Sets count_txs_all_31_60_gaming
     *
     * @param int|null $count_txs_all_31_60_gaming Gaming transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsAll3160Gaming($count_txs_all_31_60_gaming)
    {

        if (is_null($count_txs_all_31_60_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_31_60_gaming cannot be null');
        }

        $this->container['count_txs_all_31_60_gaming'] = $count_txs_all_31_60_gaming;

        return $this;
    }

    /**
     * Gets count_txs_all_31_60_gambling
     *
     * @return int|null
     */
    public function getCountTxsAll3160Gambling()
    {
        return $this->container['count_txs_all_31_60_gambling'];
    }

    /**
     * Sets count_txs_all_31_60_gambling
     *
     * @param int|null $count_txs_all_31_60_gambling Gambling transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsAll3160Gambling($count_txs_all_31_60_gambling)
    {

        if (is_null($count_txs_all_31_60_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_31_60_gambling cannot be null');
        }

        $this->container['count_txs_all_31_60_gambling'] = $count_txs_all_31_60_gambling;

        return $this;
    }

    /**
     * Gets count_txs_all_30_onchain
     *
     * @return int|null
     */
    public function getCountTxsAll30Onchain()
    {
        return $this->container['count_txs_all_30_onchain'];
    }

    /**
     * Sets count_txs_all_30_onchain
     *
     * @param int|null $count_txs_all_30_onchain Transactions count during last month
     *
     * @return self
     */
    public function setCountTxsAll30Onchain($count_txs_all_30_onchain)
    {

        if (is_null($count_txs_all_30_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_30_onchain cannot be null');
        }

        $this->container['count_txs_all_30_onchain'] = $count_txs_all_30_onchain;

        return $this;
    }

    /**
     * Gets count_txs_all_30_nft
     *
     * @return int|null
     */
    public function getCountTxsAll30Nft()
    {
        return $this->container['count_txs_all_30_nft'];
    }

    /**
     * Sets count_txs_all_30_nft
     *
     * @param int|null $count_txs_all_30_nft NFT transactions count during last month
     *
     * @return self
     */
    public function setCountTxsAll30Nft($count_txs_all_30_nft)
    {

        if (is_null($count_txs_all_30_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_30_nft cannot be null');
        }

        $this->container['count_txs_all_30_nft'] = $count_txs_all_30_nft;

        return $this;
    }

    /**
     * Gets count_txs_all_30_gaming
     *
     * @return int|null
     */
    public function getCountTxsAll30Gaming()
    {
        return $this->container['count_txs_all_30_gaming'];
    }

    /**
     * Sets count_txs_all_30_gaming
     *
     * @param int|null $count_txs_all_30_gaming Gaming transactions count during last month
     *
     * @return self
     */
    public function setCountTxsAll30Gaming($count_txs_all_30_gaming)
    {

        if (is_null($count_txs_all_30_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_30_gaming cannot be null');
        }

        $this->container['count_txs_all_30_gaming'] = $count_txs_all_30_gaming;

        return $this;
    }

    /**
     * Gets count_txs_all_30_gambling
     *
     * @return int|null
     */
    public function getCountTxsAll30Gambling()
    {
        return $this->container['count_txs_all_30_gambling'];
    }

    /**
     * Sets count_txs_all_30_gambling
     *
     * @param int|null $count_txs_all_30_gambling Gambling transactions count during last month
     *
     * @return self
     */
    public function setCountTxsAll30Gambling($count_txs_all_30_gambling)
    {

        if (is_null($count_txs_all_30_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_30_gambling cannot be null');
        }

        $this->container['count_txs_all_30_gambling'] = $count_txs_all_30_gambling;

        return $this;
    }

    /**
     * Gets count_txs_all_7_onchain
     *
     * @return int|null
     */
    public function getCountTxsAll7Onchain()
    {
        return $this->container['count_txs_all_7_onchain'];
    }

    /**
     * Sets count_txs_all_7_onchain
     *
     * @param int|null $count_txs_all_7_onchain Transactions count during last week
     *
     * @return self
     */
    public function setCountTxsAll7Onchain($count_txs_all_7_onchain)
    {

        if (is_null($count_txs_all_7_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_7_onchain cannot be null');
        }

        $this->container['count_txs_all_7_onchain'] = $count_txs_all_7_onchain;

        return $this;
    }

    /**
     * Gets count_txs_all_7_nft
     *
     * @return int|null
     */
    public function getCountTxsAll7Nft()
    {
        return $this->container['count_txs_all_7_nft'];
    }

    /**
     * Sets count_txs_all_7_nft
     *
     * @param int|null $count_txs_all_7_nft NFT transactions count during last week
     *
     * @return self
     */
    public function setCountTxsAll7Nft($count_txs_all_7_nft)
    {

        if (is_null($count_txs_all_7_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_7_nft cannot be null');
        }

        $this->container['count_txs_all_7_nft'] = $count_txs_all_7_nft;

        return $this;
    }

    /**
     * Gets count_txs_all_7_gaming
     *
     * @return int|null
     */
    public function getCountTxsAll7Gaming()
    {
        return $this->container['count_txs_all_7_gaming'];
    }

    /**
     * Sets count_txs_all_7_gaming
     *
     * @param int|null $count_txs_all_7_gaming Gaming transactions count during last week
     *
     * @return self
     */
    public function setCountTxsAll7Gaming($count_txs_all_7_gaming)
    {

        if (is_null($count_txs_all_7_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_7_gaming cannot be null');
        }

        $this->container['count_txs_all_7_gaming'] = $count_txs_all_7_gaming;

        return $this;
    }

    /**
     * Gets count_txs_all_7_gambling
     *
     * @return int|null
     */
    public function getCountTxsAll7Gambling()
    {
        return $this->container['count_txs_all_7_gambling'];
    }

    /**
     * Sets count_txs_all_7_gambling
     *
     * @param int|null $count_txs_all_7_gambling Gambling transactions count during last week
     *
     * @return self
     */
    public function setCountTxsAll7Gambling($count_txs_all_7_gambling)
    {

        if (is_null($count_txs_all_7_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_all_7_gambling cannot be null');
        }

        $this->container['count_txs_all_7_gambling'] = $count_txs_all_7_gambling;

        return $this;
    }

    /**
     * Gets count_txs_in_forever_onchain
     *
     * @return int|null
     */
    public function getCountTxsInForeverOnchain()
    {
        return $this->container['count_txs_in_forever_onchain'];
    }

    /**
     * Sets count_txs_in_forever_onchain
     *
     * @param int|null $count_txs_in_forever_onchain IN transactions count
     *
     * @return self
     */
    public function setCountTxsInForeverOnchain($count_txs_in_forever_onchain)
    {

        if (is_null($count_txs_in_forever_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_forever_onchain cannot be null');
        }

        $this->container['count_txs_in_forever_onchain'] = $count_txs_in_forever_onchain;

        return $this;
    }

    /**
     * Gets count_txs_in_forever_nft
     *
     * @return int|null
     */
    public function getCountTxsInForeverNft()
    {
        return $this->container['count_txs_in_forever_nft'];
    }

    /**
     * Sets count_txs_in_forever_nft
     *
     * @param int|null $count_txs_in_forever_nft IN NFT transactions count
     *
     * @return self
     */
    public function setCountTxsInForeverNft($count_txs_in_forever_nft)
    {

        if (is_null($count_txs_in_forever_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_forever_nft cannot be null');
        }

        $this->container['count_txs_in_forever_nft'] = $count_txs_in_forever_nft;

        return $this;
    }

    /**
     * Gets count_txs_in_forever_gaming
     *
     * @return int|null
     */
    public function getCountTxsInForeverGaming()
    {
        return $this->container['count_txs_in_forever_gaming'];
    }

    /**
     * Sets count_txs_in_forever_gaming
     *
     * @param int|null $count_txs_in_forever_gaming IN gaming transactions count
     *
     * @return self
     */
    public function setCountTxsInForeverGaming($count_txs_in_forever_gaming)
    {

        if (is_null($count_txs_in_forever_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_forever_gaming cannot be null');
        }

        $this->container['count_txs_in_forever_gaming'] = $count_txs_in_forever_gaming;

        return $this;
    }

    /**
     * Gets count_txs_in_forever_gambling
     *
     * @return int|null
     */
    public function getCountTxsInForeverGambling()
    {
        return $this->container['count_txs_in_forever_gambling'];
    }

    /**
     * Sets count_txs_in_forever_gambling
     *
     * @param int|null $count_txs_in_forever_gambling IN gambling transactions count
     *
     * @return self
     */
    public function setCountTxsInForeverGambling($count_txs_in_forever_gambling)
    {

        if (is_null($count_txs_in_forever_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_forever_gambling cannot be null');
        }

        $this->container['count_txs_in_forever_gambling'] = $count_txs_in_forever_gambling;

        return $this;
    }

    /**
     * Gets count_txs_in_365_onchain
     *
     * @return int|null
     */
    public function getCountTxsIn365Onchain()
    {
        return $this->container['count_txs_in_365_onchain'];
    }

    /**
     * Sets count_txs_in_365_onchain
     *
     * @param int|null $count_txs_in_365_onchain IN transactions count during last year
     *
     * @return self
     */
    public function setCountTxsIn365Onchain($count_txs_in_365_onchain)
    {

        if (is_null($count_txs_in_365_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_365_onchain cannot be null');
        }

        $this->container['count_txs_in_365_onchain'] = $count_txs_in_365_onchain;

        return $this;
    }

    /**
     * Gets count_txs_in_365_nft
     *
     * @return int|null
     */
    public function getCountTxsIn365Nft()
    {
        return $this->container['count_txs_in_365_nft'];
    }

    /**
     * Sets count_txs_in_365_nft
     *
     * @param int|null $count_txs_in_365_nft IN NFT transactions count during last year
     *
     * @return self
     */
    public function setCountTxsIn365Nft($count_txs_in_365_nft)
    {

        if (is_null($count_txs_in_365_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_365_nft cannot be null');
        }

        $this->container['count_txs_in_365_nft'] = $count_txs_in_365_nft;

        return $this;
    }

    /**
     * Gets count_txs_in_365_gaming
     *
     * @return int|null
     */
    public function getCountTxsIn365Gaming()
    {
        return $this->container['count_txs_in_365_gaming'];
    }

    /**
     * Sets count_txs_in_365_gaming
     *
     * @param int|null $count_txs_in_365_gaming IN gaming transactions count during last year
     *
     * @return self
     */
    public function setCountTxsIn365Gaming($count_txs_in_365_gaming)
    {

        if (is_null($count_txs_in_365_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_365_gaming cannot be null');
        }

        $this->container['count_txs_in_365_gaming'] = $count_txs_in_365_gaming;

        return $this;
    }

    /**
     * Gets count_txs_in_365_gambling
     *
     * @return int|null
     */
    public function getCountTxsIn365Gambling()
    {
        return $this->container['count_txs_in_365_gambling'];
    }

    /**
     * Sets count_txs_in_365_gambling
     *
     * @param int|null $count_txs_in_365_gambling IN gambling transactions count during last year
     *
     * @return self
     */
    public function setCountTxsIn365Gambling($count_txs_in_365_gambling)
    {

        if (is_null($count_txs_in_365_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_365_gambling cannot be null');
        }

        $this->container['count_txs_in_365_gambling'] = $count_txs_in_365_gambling;

        return $this;
    }

    /**
     * Gets count_txs_in_31_60_onchain
     *
     * @return int|null
     */
    public function getCountTxsIn3160Onchain()
    {
        return $this->container['count_txs_in_31_60_onchain'];
    }

    /**
     * Sets count_txs_in_31_60_onchain
     *
     * @param int|null $count_txs_in_31_60_onchain IN transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsIn3160Onchain($count_txs_in_31_60_onchain)
    {

        if (is_null($count_txs_in_31_60_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_31_60_onchain cannot be null');
        }

        $this->container['count_txs_in_31_60_onchain'] = $count_txs_in_31_60_onchain;

        return $this;
    }

    /**
     * Gets count_txs_in_31_60_nft
     *
     * @return int|null
     */
    public function getCountTxsIn3160Nft()
    {
        return $this->container['count_txs_in_31_60_nft'];
    }

    /**
     * Sets count_txs_in_31_60_nft
     *
     * @param int|null $count_txs_in_31_60_nft IN NFT transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsIn3160Nft($count_txs_in_31_60_nft)
    {

        if (is_null($count_txs_in_31_60_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_31_60_nft cannot be null');
        }

        $this->container['count_txs_in_31_60_nft'] = $count_txs_in_31_60_nft;

        return $this;
    }

    /**
     * Gets count_txs_in_31_60_gaming
     *
     * @return int|null
     */
    public function getCountTxsIn3160Gaming()
    {
        return $this->container['count_txs_in_31_60_gaming'];
    }

    /**
     * Sets count_txs_in_31_60_gaming
     *
     * @param int|null $count_txs_in_31_60_gaming IN gaming transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsIn3160Gaming($count_txs_in_31_60_gaming)
    {

        if (is_null($count_txs_in_31_60_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_31_60_gaming cannot be null');
        }

        $this->container['count_txs_in_31_60_gaming'] = $count_txs_in_31_60_gaming;

        return $this;
    }

    /**
     * Gets count_txs_in_31_60_gambling
     *
     * @return int|null
     */
    public function getCountTxsIn3160Gambling()
    {
        return $this->container['count_txs_in_31_60_gambling'];
    }

    /**
     * Sets count_txs_in_31_60_gambling
     *
     * @param int|null $count_txs_in_31_60_gambling IN gambling transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsIn3160Gambling($count_txs_in_31_60_gambling)
    {

        if (is_null($count_txs_in_31_60_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_31_60_gambling cannot be null');
        }

        $this->container['count_txs_in_31_60_gambling'] = $count_txs_in_31_60_gambling;

        return $this;
    }

    /**
     * Gets count_txs_in_30_onchain
     *
     * @return int|null
     */
    public function getCountTxsIn30Onchain()
    {
        return $this->container['count_txs_in_30_onchain'];
    }

    /**
     * Sets count_txs_in_30_onchain
     *
     * @param int|null $count_txs_in_30_onchain IN transactions count during last month
     *
     * @return self
     */
    public function setCountTxsIn30Onchain($count_txs_in_30_onchain)
    {

        if (is_null($count_txs_in_30_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_30_onchain cannot be null');
        }

        $this->container['count_txs_in_30_onchain'] = $count_txs_in_30_onchain;

        return $this;
    }

    /**
     * Gets count_txs_in_30_nft
     *
     * @return int|null
     */
    public function getCountTxsIn30Nft()
    {
        return $this->container['count_txs_in_30_nft'];
    }

    /**
     * Sets count_txs_in_30_nft
     *
     * @param int|null $count_txs_in_30_nft IN NFT transactions count during last month
     *
     * @return self
     */
    public function setCountTxsIn30Nft($count_txs_in_30_nft)
    {

        if (is_null($count_txs_in_30_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_30_nft cannot be null');
        }

        $this->container['count_txs_in_30_nft'] = $count_txs_in_30_nft;

        return $this;
    }

    /**
     * Gets count_txs_in_30_gaming
     *
     * @return int|null
     */
    public function getCountTxsIn30Gaming()
    {
        return $this->container['count_txs_in_30_gaming'];
    }

    /**
     * Sets count_txs_in_30_gaming
     *
     * @param int|null $count_txs_in_30_gaming IN gaming transactions count during last month
     *
     * @return self
     */
    public function setCountTxsIn30Gaming($count_txs_in_30_gaming)
    {

        if (is_null($count_txs_in_30_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_30_gaming cannot be null');
        }

        $this->container['count_txs_in_30_gaming'] = $count_txs_in_30_gaming;

        return $this;
    }

    /**
     * Gets count_txs_in_30_gambling
     *
     * @return int|null
     */
    public function getCountTxsIn30Gambling()
    {
        return $this->container['count_txs_in_30_gambling'];
    }

    /**
     * Sets count_txs_in_30_gambling
     *
     * @param int|null $count_txs_in_30_gambling IN gambling transactions count during last month
     *
     * @return self
     */
    public function setCountTxsIn30Gambling($count_txs_in_30_gambling)
    {

        if (is_null($count_txs_in_30_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_30_gambling cannot be null');
        }

        $this->container['count_txs_in_30_gambling'] = $count_txs_in_30_gambling;

        return $this;
    }

    /**
     * Gets count_txs_in_7_onchain
     *
     * @return int|null
     */
    public function getCountTxsIn7Onchain()
    {
        return $this->container['count_txs_in_7_onchain'];
    }

    /**
     * Sets count_txs_in_7_onchain
     *
     * @param int|null $count_txs_in_7_onchain IN transactions count during last week
     *
     * @return self
     */
    public function setCountTxsIn7Onchain($count_txs_in_7_onchain)
    {

        if (is_null($count_txs_in_7_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_7_onchain cannot be null');
        }

        $this->container['count_txs_in_7_onchain'] = $count_txs_in_7_onchain;

        return $this;
    }

    /**
     * Gets count_txs_in_7_nft
     *
     * @return int|null
     */
    public function getCountTxsIn7Nft()
    {
        return $this->container['count_txs_in_7_nft'];
    }

    /**
     * Sets count_txs_in_7_nft
     *
     * @param int|null $count_txs_in_7_nft IN NFT transactions count during last week
     *
     * @return self
     */
    public function setCountTxsIn7Nft($count_txs_in_7_nft)
    {

        if (is_null($count_txs_in_7_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_7_nft cannot be null');
        }

        $this->container['count_txs_in_7_nft'] = $count_txs_in_7_nft;

        return $this;
    }

    /**
     * Gets count_txs_in_7_gaming
     *
     * @return int|null
     */
    public function getCountTxsIn7Gaming()
    {
        return $this->container['count_txs_in_7_gaming'];
    }

    /**
     * Sets count_txs_in_7_gaming
     *
     * @param int|null $count_txs_in_7_gaming IN gaming transactions count during last week
     *
     * @return self
     */
    public function setCountTxsIn7Gaming($count_txs_in_7_gaming)
    {

        if (is_null($count_txs_in_7_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_7_gaming cannot be null');
        }

        $this->container['count_txs_in_7_gaming'] = $count_txs_in_7_gaming;

        return $this;
    }

    /**
     * Gets count_txs_in_7_gambling
     *
     * @return int|null
     */
    public function getCountTxsIn7Gambling()
    {
        return $this->container['count_txs_in_7_gambling'];
    }

    /**
     * Sets count_txs_in_7_gambling
     *
     * @param int|null $count_txs_in_7_gambling IN gambling transactions count during last week
     *
     * @return self
     */
    public function setCountTxsIn7Gambling($count_txs_in_7_gambling)
    {

        if (is_null($count_txs_in_7_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_in_7_gambling cannot be null');
        }

        $this->container['count_txs_in_7_gambling'] = $count_txs_in_7_gambling;

        return $this;
    }

    /**
     * Gets count_txs_out_forever_onchain
     *
     * @return int|null
     */
    public function getCountTxsOutForeverOnchain()
    {
        return $this->container['count_txs_out_forever_onchain'];
    }

    /**
     * Sets count_txs_out_forever_onchain
     *
     * @param int|null $count_txs_out_forever_onchain OUT transactions count
     *
     * @return self
     */
    public function setCountTxsOutForeverOnchain($count_txs_out_forever_onchain)
    {

        if (is_null($count_txs_out_forever_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_forever_onchain cannot be null');
        }

        $this->container['count_txs_out_forever_onchain'] = $count_txs_out_forever_onchain;

        return $this;
    }

    /**
     * Gets count_txs_out_forever_nft
     *
     * @return int|null
     */
    public function getCountTxsOutForeverNft()
    {
        return $this->container['count_txs_out_forever_nft'];
    }

    /**
     * Sets count_txs_out_forever_nft
     *
     * @param int|null $count_txs_out_forever_nft OUT NFT transactions count
     *
     * @return self
     */
    public function setCountTxsOutForeverNft($count_txs_out_forever_nft)
    {

        if (is_null($count_txs_out_forever_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_forever_nft cannot be null');
        }

        $this->container['count_txs_out_forever_nft'] = $count_txs_out_forever_nft;

        return $this;
    }

    /**
     * Gets count_txs_out_forever_gaming
     *
     * @return int|null
     */
    public function getCountTxsOutForeverGaming()
    {
        return $this->container['count_txs_out_forever_gaming'];
    }

    /**
     * Sets count_txs_out_forever_gaming
     *
     * @param int|null $count_txs_out_forever_gaming OUT gaming transactions count
     *
     * @return self
     */
    public function setCountTxsOutForeverGaming($count_txs_out_forever_gaming)
    {

        if (is_null($count_txs_out_forever_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_forever_gaming cannot be null');
        }

        $this->container['count_txs_out_forever_gaming'] = $count_txs_out_forever_gaming;

        return $this;
    }

    /**
     * Gets count_txs_out_forever_gambling
     *
     * @return int|null
     */
    public function getCountTxsOutForeverGambling()
    {
        return $this->container['count_txs_out_forever_gambling'];
    }

    /**
     * Sets count_txs_out_forever_gambling
     *
     * @param int|null $count_txs_out_forever_gambling OUT gambling transactions count
     *
     * @return self
     */
    public function setCountTxsOutForeverGambling($count_txs_out_forever_gambling)
    {

        if (is_null($count_txs_out_forever_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_forever_gambling cannot be null');
        }

        $this->container['count_txs_out_forever_gambling'] = $count_txs_out_forever_gambling;

        return $this;
    }

    /**
     * Gets count_txs_out_365_onchain
     *
     * @return int|null
     */
    public function getCountTxsOut365Onchain()
    {
        return $this->container['count_txs_out_365_onchain'];
    }

    /**
     * Sets count_txs_out_365_onchain
     *
     * @param int|null $count_txs_out_365_onchain OUT transactions count during last year
     *
     * @return self
     */
    public function setCountTxsOut365Onchain($count_txs_out_365_onchain)
    {

        if (is_null($count_txs_out_365_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_365_onchain cannot be null');
        }

        $this->container['count_txs_out_365_onchain'] = $count_txs_out_365_onchain;

        return $this;
    }

    /**
     * Gets count_txs_out_365_nft
     *
     * @return int|null
     */
    public function getCountTxsOut365Nft()
    {
        return $this->container['count_txs_out_365_nft'];
    }

    /**
     * Sets count_txs_out_365_nft
     *
     * @param int|null $count_txs_out_365_nft OUT NFT transactions count during last year
     *
     * @return self
     */
    public function setCountTxsOut365Nft($count_txs_out_365_nft)
    {

        if (is_null($count_txs_out_365_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_365_nft cannot be null');
        }

        $this->container['count_txs_out_365_nft'] = $count_txs_out_365_nft;

        return $this;
    }

    /**
     * Gets count_txs_out_365_gaming
     *
     * @return int|null
     */
    public function getCountTxsOut365Gaming()
    {
        return $this->container['count_txs_out_365_gaming'];
    }

    /**
     * Sets count_txs_out_365_gaming
     *
     * @param int|null $count_txs_out_365_gaming OUT gaming transactions count during last year
     *
     * @return self
     */
    public function setCountTxsOut365Gaming($count_txs_out_365_gaming)
    {

        if (is_null($count_txs_out_365_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_365_gaming cannot be null');
        }

        $this->container['count_txs_out_365_gaming'] = $count_txs_out_365_gaming;

        return $this;
    }

    /**
     * Gets count_txs_out_365_gambling
     *
     * @return int|null
     */
    public function getCountTxsOut365Gambling()
    {
        return $this->container['count_txs_out_365_gambling'];
    }

    /**
     * Sets count_txs_out_365_gambling
     *
     * @param int|null $count_txs_out_365_gambling OUT gambling transactions count during last year
     *
     * @return self
     */
    public function setCountTxsOut365Gambling($count_txs_out_365_gambling)
    {

        if (is_null($count_txs_out_365_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_365_gambling cannot be null');
        }

        $this->container['count_txs_out_365_gambling'] = $count_txs_out_365_gambling;

        return $this;
    }

    /**
     * Gets count_txs_out_31_60_onchain
     *
     * @return int|null
     */
    public function getCountTxsOut3160Onchain()
    {
        return $this->container['count_txs_out_31_60_onchain'];
    }

    /**
     * Sets count_txs_out_31_60_onchain
     *
     * @param int|null $count_txs_out_31_60_onchain OUT transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsOut3160Onchain($count_txs_out_31_60_onchain)
    {

        if (is_null($count_txs_out_31_60_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_31_60_onchain cannot be null');
        }

        $this->container['count_txs_out_31_60_onchain'] = $count_txs_out_31_60_onchain;

        return $this;
    }

    /**
     * Gets count_txs_out_31_60_nft
     *
     * @return int|null
     */
    public function getCountTxsOut3160Nft()
    {
        return $this->container['count_txs_out_31_60_nft'];
    }

    /**
     * Sets count_txs_out_31_60_nft
     *
     * @param int|null $count_txs_out_31_60_nft OUT NFT transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsOut3160Nft($count_txs_out_31_60_nft)
    {

        if (is_null($count_txs_out_31_60_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_31_60_nft cannot be null');
        }

        $this->container['count_txs_out_31_60_nft'] = $count_txs_out_31_60_nft;

        return $this;
    }

    /**
     * Gets count_txs_out_31_60_gaming
     *
     * @return int|null
     */
    public function getCountTxsOut3160Gaming()
    {
        return $this->container['count_txs_out_31_60_gaming'];
    }

    /**
     * Sets count_txs_out_31_60_gaming
     *
     * @param int|null $count_txs_out_31_60_gaming OUT gaming transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsOut3160Gaming($count_txs_out_31_60_gaming)
    {

        if (is_null($count_txs_out_31_60_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_31_60_gaming cannot be null');
        }

        $this->container['count_txs_out_31_60_gaming'] = $count_txs_out_31_60_gaming;

        return $this;
    }

    /**
     * Gets count_txs_out_31_60_gambling
     *
     * @return int|null
     */
    public function getCountTxsOut3160Gambling()
    {
        return $this->container['count_txs_out_31_60_gambling'];
    }

    /**
     * Sets count_txs_out_31_60_gambling
     *
     * @param int|null $count_txs_out_31_60_gambling OUT gambling transactions count during previous month
     *
     * @return self
     */
    public function setCountTxsOut3160Gambling($count_txs_out_31_60_gambling)
    {

        if (is_null($count_txs_out_31_60_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_31_60_gambling cannot be null');
        }

        $this->container['count_txs_out_31_60_gambling'] = $count_txs_out_31_60_gambling;

        return $this;
    }

    /**
     * Gets count_txs_out_30_onchain
     *
     * @return int|null
     */
    public function getCountTxsOut30Onchain()
    {
        return $this->container['count_txs_out_30_onchain'];
    }

    /**
     * Sets count_txs_out_30_onchain
     *
     * @param int|null $count_txs_out_30_onchain OUT transactions count during last month
     *
     * @return self
     */
    public function setCountTxsOut30Onchain($count_txs_out_30_onchain)
    {

        if (is_null($count_txs_out_30_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_30_onchain cannot be null');
        }

        $this->container['count_txs_out_30_onchain'] = $count_txs_out_30_onchain;

        return $this;
    }

    /**
     * Gets count_txs_out_30_nft
     *
     * @return int|null
     */
    public function getCountTxsOut30Nft()
    {
        return $this->container['count_txs_out_30_nft'];
    }

    /**
     * Sets count_txs_out_30_nft
     *
     * @param int|null $count_txs_out_30_nft OUT NFT transactions count during last month
     *
     * @return self
     */
    public function setCountTxsOut30Nft($count_txs_out_30_nft)
    {

        if (is_null($count_txs_out_30_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_30_nft cannot be null');
        }

        $this->container['count_txs_out_30_nft'] = $count_txs_out_30_nft;

        return $this;
    }

    /**
     * Gets count_txs_out_30_gaming
     *
     * @return int|null
     */
    public function getCountTxsOut30Gaming()
    {
        return $this->container['count_txs_out_30_gaming'];
    }

    /**
     * Sets count_txs_out_30_gaming
     *
     * @param int|null $count_txs_out_30_gaming OUT gaming transactions count during last month
     *
     * @return self
     */
    public function setCountTxsOut30Gaming($count_txs_out_30_gaming)
    {

        if (is_null($count_txs_out_30_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_30_gaming cannot be null');
        }

        $this->container['count_txs_out_30_gaming'] = $count_txs_out_30_gaming;

        return $this;
    }

    /**
     * Gets count_txs_out_30_gambling
     *
     * @return int|null
     */
    public function getCountTxsOut30Gambling()
    {
        return $this->container['count_txs_out_30_gambling'];
    }

    /**
     * Sets count_txs_out_30_gambling
     *
     * @param int|null $count_txs_out_30_gambling OUT gambling transactions count during last month
     *
     * @return self
     */
    public function setCountTxsOut30Gambling($count_txs_out_30_gambling)
    {

        if (is_null($count_txs_out_30_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_30_gambling cannot be null');
        }

        $this->container['count_txs_out_30_gambling'] = $count_txs_out_30_gambling;

        return $this;
    }

    /**
     * Gets count_txs_out_7_onchain
     *
     * @return int|null
     */
    public function getCountTxsOut7Onchain()
    {
        return $this->container['count_txs_out_7_onchain'];
    }

    /**
     * Sets count_txs_out_7_onchain
     *
     * @param int|null $count_txs_out_7_onchain OUT transactions count during last week
     *
     * @return self
     */
    public function setCountTxsOut7Onchain($count_txs_out_7_onchain)
    {

        if (is_null($count_txs_out_7_onchain)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_7_onchain cannot be null');
        }

        $this->container['count_txs_out_7_onchain'] = $count_txs_out_7_onchain;

        return $this;
    }

    /**
     * Gets count_txs_out_7_nft
     *
     * @return int|null
     */
    public function getCountTxsOut7Nft()
    {
        return $this->container['count_txs_out_7_nft'];
    }

    /**
     * Sets count_txs_out_7_nft
     *
     * @param int|null $count_txs_out_7_nft OUT NFT transactions count during last week
     *
     * @return self
     */
    public function setCountTxsOut7Nft($count_txs_out_7_nft)
    {

        if (is_null($count_txs_out_7_nft)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_7_nft cannot be null');
        }

        $this->container['count_txs_out_7_nft'] = $count_txs_out_7_nft;

        return $this;
    }

    /**
     * Gets count_txs_out_7_gaming
     *
     * @return int|null
     */
    public function getCountTxsOut7Gaming()
    {
        return $this->container['count_txs_out_7_gaming'];
    }

    /**
     * Sets count_txs_out_7_gaming
     *
     * @param int|null $count_txs_out_7_gaming OUT gaming transactions count during last week
     *
     * @return self
     */
    public function setCountTxsOut7Gaming($count_txs_out_7_gaming)
    {

        if (is_null($count_txs_out_7_gaming)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_7_gaming cannot be null');
        }

        $this->container['count_txs_out_7_gaming'] = $count_txs_out_7_gaming;

        return $this;
    }

    /**
     * Gets count_txs_out_7_gambling
     *
     * @return int|null
     */
    public function getCountTxsOut7Gambling()
    {
        return $this->container['count_txs_out_7_gambling'];
    }

    /**
     * Sets count_txs_out_7_gambling
     *
     * @param int|null $count_txs_out_7_gambling OUT gambling transactions count during last week
     *
     * @return self
     */
    public function setCountTxsOut7Gambling($count_txs_out_7_gambling)
    {

        if (is_null($count_txs_out_7_gambling)) {
            throw new \InvalidArgumentException('non-nullable count_txs_out_7_gambling cannot be null');
        }

        $this->container['count_txs_out_7_gambling'] = $count_txs_out_7_gambling;

        return $this;
    }

    /**
     * Gets first_txs_all_onchain
     *
     * @return int|null
     */
    public function getFirstTxsAllOnchain()
    {
        return $this->container['first_txs_all_onchain'];
    }

    /**
     * Sets first_txs_all_onchain
     *
     * @param int|null $first_txs_all_onchain Unix timestamp when first transaction occurred
     *
     * @return self
     */
    public function setFirstTxsAllOnchain($first_txs_all_onchain)
    {

        if (is_null($first_txs_all_onchain)) {
            throw new \InvalidArgumentException('non-nullable first_txs_all_onchain cannot be null');
        }

        $this->container['first_txs_all_onchain'] = $first_txs_all_onchain;

        return $this;
    }

    /**
     * Gets first_txs_all_nft
     *
     * @return int|null
     */
    public function getFirstTxsAllNft()
    {
        return $this->container['first_txs_all_nft'];
    }

    /**
     * Sets first_txs_all_nft
     *
     * @param int|null $first_txs_all_nft Unix timestamp when first NFT transaction occurred
     *
     * @return self
     */
    public function setFirstTxsAllNft($first_txs_all_nft)
    {

        if (is_null($first_txs_all_nft)) {
            throw new \InvalidArgumentException('non-nullable first_txs_all_nft cannot be null');
        }

        $this->container['first_txs_all_nft'] = $first_txs_all_nft;

        return $this;
    }

    /**
     * Gets first_txs_all_gaming
     *
     * @return int|null
     */
    public function getFirstTxsAllGaming()
    {
        return $this->container['first_txs_all_gaming'];
    }

    /**
     * Sets first_txs_all_gaming
     *
     * @param int|null $first_txs_all_gaming Unix timestamp when first gaming transaction occurred
     *
     * @return self
     */
    public function setFirstTxsAllGaming($first_txs_all_gaming)
    {

        if (is_null($first_txs_all_gaming)) {
            throw new \InvalidArgumentException('non-nullable first_txs_all_gaming cannot be null');
        }

        $this->container['first_txs_all_gaming'] = $first_txs_all_gaming;

        return $this;
    }

    /**
     * Gets first_txs_all_gambling
     *
     * @return int|null
     */
    public function getFirstTxsAllGambling()
    {
        return $this->container['first_txs_all_gambling'];
    }

    /**
     * Sets first_txs_all_gambling
     *
     * @param int|null $first_txs_all_gambling Unix timestamp when first gambling transaction occurred
     *
     * @return self
     */
    public function setFirstTxsAllGambling($first_txs_all_gambling)
    {

        if (is_null($first_txs_all_gambling)) {
            throw new \InvalidArgumentException('non-nullable first_txs_all_gambling cannot be null');
        }

        $this->container['first_txs_all_gambling'] = $first_txs_all_gambling;

        return $this;
    }

    /**
     * Gets first_txs_in_onchain
     *
     * @return int|null
     */
    public function getFirstTxsInOnchain()
    {
        return $this->container['first_txs_in_onchain'];
    }

    /**
     * Sets first_txs_in_onchain
     *
     * @param int|null $first_txs_in_onchain Unix timestamp when first IN transaction occurred
     *
     * @return self
     */
    public function setFirstTxsInOnchain($first_txs_in_onchain)
    {

        if (is_null($first_txs_in_onchain)) {
            throw new \InvalidArgumentException('non-nullable first_txs_in_onchain cannot be null');
        }

        $this->container['first_txs_in_onchain'] = $first_txs_in_onchain;

        return $this;
    }

    /**
     * Gets first_txs_in_nft
     *
     * @return int|null
     */
    public function getFirstTxsInNft()
    {
        return $this->container['first_txs_in_nft'];
    }

    /**
     * Sets first_txs_in_nft
     *
     * @param int|null $first_txs_in_nft Unix timestamp when first IN NFT transaction occurred
     *
     * @return self
     */
    public function setFirstTxsInNft($first_txs_in_nft)
    {

        if (is_null($first_txs_in_nft)) {
            throw new \InvalidArgumentException('non-nullable first_txs_in_nft cannot be null');
        }

        $this->container['first_txs_in_nft'] = $first_txs_in_nft;

        return $this;
    }

    /**
     * Gets first_txs_in_gaming
     *
     * @return int|null
     */
    public function getFirstTxsInGaming()
    {
        return $this->container['first_txs_in_gaming'];
    }

    /**
     * Sets first_txs_in_gaming
     *
     * @param int|null $first_txs_in_gaming Unix timestamp when first IN gaming transaction occurred
     *
     * @return self
     */
    public function setFirstTxsInGaming($first_txs_in_gaming)
    {

        if (is_null($first_txs_in_gaming)) {
            throw new \InvalidArgumentException('non-nullable first_txs_in_gaming cannot be null');
        }

        $this->container['first_txs_in_gaming'] = $first_txs_in_gaming;

        return $this;
    }

    /**
     * Gets first_txs_in_gambling
     *
     * @return int|null
     */
    public function getFirstTxsInGambling()
    {
        return $this->container['first_txs_in_gambling'];
    }

    /**
     * Sets first_txs_in_gambling
     *
     * @param int|null $first_txs_in_gambling Unix timestamp when first IN gambling transaction occurred
     *
     * @return self
     */
    public function setFirstTxsInGambling($first_txs_in_gambling)
    {

        if (is_null($first_txs_in_gambling)) {
            throw new \InvalidArgumentException('non-nullable first_txs_in_gambling cannot be null');
        }

        $this->container['first_txs_in_gambling'] = $first_txs_in_gambling;

        return $this;
    }

    /**
     * Gets first_txs_out_onchain
     *
     * @return int|null
     */
    public function getFirstTxsOutOnchain()
    {
        return $this->container['first_txs_out_onchain'];
    }

    /**
     * Sets first_txs_out_onchain
     *
     * @param int|null $first_txs_out_onchain Unix timestamp when first OUT transaction occurred
     *
     * @return self
     */
    public function setFirstTxsOutOnchain($first_txs_out_onchain)
    {

        if (is_null($first_txs_out_onchain)) {
            throw new \InvalidArgumentException('non-nullable first_txs_out_onchain cannot be null');
        }

        $this->container['first_txs_out_onchain'] = $first_txs_out_onchain;

        return $this;
    }

    /**
     * Gets first_txs_out_nft
     *
     * @return int|null
     */
    public function getFirstTxsOutNft()
    {
        return $this->container['first_txs_out_nft'];
    }

    /**
     * Sets first_txs_out_nft
     *
     * @param int|null $first_txs_out_nft Unix timestamp when first OUT NFT transaction occurred
     *
     * @return self
     */
    public function setFirstTxsOutNft($first_txs_out_nft)
    {

        if (is_null($first_txs_out_nft)) {
            throw new \InvalidArgumentException('non-nullable first_txs_out_nft cannot be null');
        }

        $this->container['first_txs_out_nft'] = $first_txs_out_nft;

        return $this;
    }

    /**
     * Gets first_txs_out_gaming
     *
     * @return int|null
     */
    public function getFirstTxsOutGaming()
    {
        return $this->container['first_txs_out_gaming'];
    }

    /**
     * Sets first_txs_out_gaming
     *
     * @param int|null $first_txs_out_gaming Unix timestamp when first OUT gaming transaction occurred
     *
     * @return self
     */
    public function setFirstTxsOutGaming($first_txs_out_gaming)
    {

        if (is_null($first_txs_out_gaming)) {
            throw new \InvalidArgumentException('non-nullable first_txs_out_gaming cannot be null');
        }

        $this->container['first_txs_out_gaming'] = $first_txs_out_gaming;

        return $this;
    }

    /**
     * Gets first_txs_out_gambling
     *
     * @return int|null
     */
    public function getFirstTxsOutGambling()
    {
        return $this->container['first_txs_out_gambling'];
    }

    /**
     * Sets first_txs_out_gambling
     *
     * @param int|null $first_txs_out_gambling Unix timestamp when first OUT gambling transaction occurred
     *
     * @return self
     */
    public function setFirstTxsOutGambling($first_txs_out_gambling)
    {

        if (is_null($first_txs_out_gambling)) {
            throw new \InvalidArgumentException('non-nullable first_txs_out_gambling cannot be null');
        }

        $this->container['first_txs_out_gambling'] = $first_txs_out_gambling;

        return $this;
    }

    /**
     * Gets last_txs_all_onchain
     *
     * @return int|null
     */
    public function getLastTxsAllOnchain()
    {
        return $this->container['last_txs_all_onchain'];
    }

    /**
     * Sets last_txs_all_onchain
     *
     * @param int|null $last_txs_all_onchain Unix timestamp when last transaction occurred
     *
     * @return self
     */
    public function setLastTxsAllOnchain($last_txs_all_onchain)
    {

        if (is_null($last_txs_all_onchain)) {
            throw new \InvalidArgumentException('non-nullable last_txs_all_onchain cannot be null');
        }

        $this->container['last_txs_all_onchain'] = $last_txs_all_onchain;

        return $this;
    }

    /**
     * Gets last_txs_all_nft
     *
     * @return int|null
     */
    public function getLastTxsAllNft()
    {
        return $this->container['last_txs_all_nft'];
    }

    /**
     * Sets last_txs_all_nft
     *
     * @param int|null $last_txs_all_nft Unix timestamp when last NFT transaction occurred
     *
     * @return self
     */
    public function setLastTxsAllNft($last_txs_all_nft)
    {

        if (is_null($last_txs_all_nft)) {
            throw new \InvalidArgumentException('non-nullable last_txs_all_nft cannot be null');
        }

        $this->container['last_txs_all_nft'] = $last_txs_all_nft;

        return $this;
    }

    /**
     * Gets last_txs_all_gaming
     *
     * @return int|null
     */
    public function getLastTxsAllGaming()
    {
        return $this->container['last_txs_all_gaming'];
    }

    /**
     * Sets last_txs_all_gaming
     *
     * @param int|null $last_txs_all_gaming Unix timestamp when last gaming transaction occurred
     *
     * @return self
     */
    public function setLastTxsAllGaming($last_txs_all_gaming)
    {

        if (is_null($last_txs_all_gaming)) {
            throw new \InvalidArgumentException('non-nullable last_txs_all_gaming cannot be null');
        }

        $this->container['last_txs_all_gaming'] = $last_txs_all_gaming;

        return $this;
    }

    /**
     * Gets last_txs_all_gambling
     *
     * @return int|null
     */
    public function getLastTxsAllGambling()
    {
        return $this->container['last_txs_all_gambling'];
    }

    /**
     * Sets last_txs_all_gambling
     *
     * @param int|null $last_txs_all_gambling Unix timestamp when last gambling transaction occurred
     *
     * @return self
     */
    public function setLastTxsAllGambling($last_txs_all_gambling)
    {

        if (is_null($last_txs_all_gambling)) {
            throw new \InvalidArgumentException('non-nullable last_txs_all_gambling cannot be null');
        }

        $this->container['last_txs_all_gambling'] = $last_txs_all_gambling;

        return $this;
    }

    /**
     * Gets last_txs_in_onchain
     *
     * @return int|null
     */
    public function getLastTxsInOnchain()
    {
        return $this->container['last_txs_in_onchain'];
    }

    /**
     * Sets last_txs_in_onchain
     *
     * @param int|null $last_txs_in_onchain Unix timestamp when last IN transaction occurred
     *
     * @return self
     */
    public function setLastTxsInOnchain($last_txs_in_onchain)
    {

        if (is_null($last_txs_in_onchain)) {
            throw new \InvalidArgumentException('non-nullable last_txs_in_onchain cannot be null');
        }

        $this->container['last_txs_in_onchain'] = $last_txs_in_onchain;

        return $this;
    }

    /**
     * Gets last_txs_in_nft
     *
     * @return int|null
     */
    public function getLastTxsInNft()
    {
        return $this->container['last_txs_in_nft'];
    }

    /**
     * Sets last_txs_in_nft
     *
     * @param int|null $last_txs_in_nft Unix timestamp when last IN NFT transaction occurred
     *
     * @return self
     */
    public function setLastTxsInNft($last_txs_in_nft)
    {

        if (is_null($last_txs_in_nft)) {
            throw new \InvalidArgumentException('non-nullable last_txs_in_nft cannot be null');
        }

        $this->container['last_txs_in_nft'] = $last_txs_in_nft;

        return $this;
    }

    /**
     * Gets last_txs_in_gaming
     *
     * @return int|null
     */
    public function getLastTxsInGaming()
    {
        return $this->container['last_txs_in_gaming'];
    }

    /**
     * Sets last_txs_in_gaming
     *
     * @param int|null $last_txs_in_gaming Unix timestamp when last IN gaming transaction occurred
     *
     * @return self
     */
    public function setLastTxsInGaming($last_txs_in_gaming)
    {

        if (is_null($last_txs_in_gaming)) {
            throw new \InvalidArgumentException('non-nullable last_txs_in_gaming cannot be null');
        }

        $this->container['last_txs_in_gaming'] = $last_txs_in_gaming;

        return $this;
    }

    /**
     * Gets last_txs_in_gambling
     *
     * @return int|null
     */
    public function getLastTxsInGambling()
    {
        return $this->container['last_txs_in_gambling'];
    }

    /**
     * Sets last_txs_in_gambling
     *
     * @param int|null $last_txs_in_gambling Unix timestamp when last IN gambling transaction occurred
     *
     * @return self
     */
    public function setLastTxsInGambling($last_txs_in_gambling)
    {

        if (is_null($last_txs_in_gambling)) {
            throw new \InvalidArgumentException('non-nullable last_txs_in_gambling cannot be null');
        }

        $this->container['last_txs_in_gambling'] = $last_txs_in_gambling;

        return $this;
    }

    /**
     * Gets last_txs_out_onchain
     *
     * @return int|null
     */
    public function getLastTxsOutOnchain()
    {
        return $this->container['last_txs_out_onchain'];
    }

    /**
     * Sets last_txs_out_onchain
     *
     * @param int|null $last_txs_out_onchain Unix timestamp when last OUT transaction occurred
     *
     * @return self
     */
    public function setLastTxsOutOnchain($last_txs_out_onchain)
    {

        if (is_null($last_txs_out_onchain)) {
            throw new \InvalidArgumentException('non-nullable last_txs_out_onchain cannot be null');
        }

        $this->container['last_txs_out_onchain'] = $last_txs_out_onchain;

        return $this;
    }

    /**
     * Gets last_txs_out_nft
     *
     * @return int|null
     */
    public function getLastTxsOutNft()
    {
        return $this->container['last_txs_out_nft'];
    }

    /**
     * Sets last_txs_out_nft
     *
     * @param int|null $last_txs_out_nft Unix timestamp when last OUT NFT transaction occurred
     *
     * @return self
     */
    public function setLastTxsOutNft($last_txs_out_nft)
    {

        if (is_null($last_txs_out_nft)) {
            throw new \InvalidArgumentException('non-nullable last_txs_out_nft cannot be null');
        }

        $this->container['last_txs_out_nft'] = $last_txs_out_nft;

        return $this;
    }

    /**
     * Gets last_txs_out_gaming
     *
     * @return int|null
     */
    public function getLastTxsOutGaming()
    {
        return $this->container['last_txs_out_gaming'];
    }

    /**
     * Sets last_txs_out_gaming
     *
     * @param int|null $last_txs_out_gaming Unix timestamp when last OUT gaming transaction occurred
     *
     * @return self
     */
    public function setLastTxsOutGaming($last_txs_out_gaming)
    {

        if (is_null($last_txs_out_gaming)) {
            throw new \InvalidArgumentException('non-nullable last_txs_out_gaming cannot be null');
        }

        $this->container['last_txs_out_gaming'] = $last_txs_out_gaming;

        return $this;
    }

    /**
     * Gets last_txs_out_gambling
     *
     * @return int|null
     */
    public function getLastTxsOutGambling()
    {
        return $this->container['last_txs_out_gambling'];
    }

    /**
     * Sets last_txs_out_gambling
     *
     * @param int|null $last_txs_out_gambling Unix timestamp when last OUT gambling transaction occurred
     *
     * @return self
     */
    public function setLastTxsOutGambling($last_txs_out_gambling)
    {

        if (is_null($last_txs_out_gambling)) {
            throw new \InvalidArgumentException('non-nullable last_txs_out_gambling cannot be null');
        }

        $this->container['last_txs_out_gambling'] = $last_txs_out_gambling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


